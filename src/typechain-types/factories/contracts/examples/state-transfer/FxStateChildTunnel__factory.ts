/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  FxStateChildTunnel,
  FxStateChildTunnelInterface,
} from "../../../../contracts/examples/state-transfer/FxStateChildTunnel";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_fxChild",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [],
    name: "fxChild",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fxRootTunnel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRootMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestStateId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stateId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "rootMessageSender",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "processMessageFromRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "sendMessageToRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fxRootTunnel",
        type: "address",
      },
    ],
    name: "setFxRootTunnel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405162000f8c38038062000f8c833981810160405281019061003491906100df565b80806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061010c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ac82610081565b9050919050565b6100bc816100a1565b81146100c757600080fd5b50565b6000815190506100d9816100b3565b92915050565b6000602082840312156100f5576100f461007c565b5b6000610103848285016100ca565b91505092915050565b610e70806200011c6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063888370941161005b57806388837094146101055780639a113ee2146101215780639a7c4b711461013d578063e6a8e7451461015957610088565b8063142bc2ae1461008d578063450d11f0146100ab5780635a319df9146100c95780637f1e9cb0146100e7575b600080fd5b610095610177565b6040516100a291906105f8565b60405180910390f35b6100b3610205565b6040516100c0919061065b565b60405180910390f35b6100d1610229565b6040516100de919061068f565b60405180910390f35b6100ef61022f565b6040516100fc919061065b565b60405180910390f35b61011f600480360381019061011a91906106ea565b610255565b005b61013b6004803603810190610136919061084c565b61032a565b005b61015760048036038101906101529190610921565b610336565b005b610161610419565b60405161016e919061065b565b60405180910390f35b60048054610184906109c4565b80601f01602080910402602001604051908101604052809291908181526020018280546101b0906109c4565b80156101fd5780601f106101d2576101008083540402835291602001916101fd565b820191906000526020600020905b8154815290600101906020018083116101e057829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610a78565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6103338161043f565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb90610b0a565b60405180910390fd5b610413848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610479565b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0368160405161046e91906105f8565b60405180910390a150565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461050a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050190610b9c565b60405180910390fd5b8360028190555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600490816105619190610d68565b5050505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105a2578082015181840152602081019050610587565b60008484015250505050565b6000601f19601f8301169050919050565b60006105ca82610568565b6105d48185610573565b93506105e4818560208601610584565b6105ed816105ae565b840191505092915050565b6000602082019050818103600083015261061281846105bf565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106458261061a565b9050919050565b6106558161063a565b82525050565b6000602082019050610670600083018461064c565b92915050565b6000819050919050565b61068981610676565b82525050565b60006020820190506106a46000830184610680565b92915050565b6000604051905090565b600080fd5b600080fd5b6106c78161063a565b81146106d257600080fd5b50565b6000813590506106e4816106be565b92915050565b600060208284031215610700576106ff6106b4565b5b600061070e848285016106d5565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610759826105ae565b810181811067ffffffffffffffff8211171561077857610777610721565b5b80604052505050565b600061078b6106aa565b90506107978282610750565b919050565b600067ffffffffffffffff8211156107b7576107b6610721565b5b6107c0826105ae565b9050602081019050919050565b82818337600083830152505050565b60006107ef6107ea8461079c565b610781565b90508281526020810184848401111561080b5761080a61071c565b5b6108168482856107cd565b509392505050565b600082601f83011261083357610832610717565b5b81356108438482602086016107dc565b91505092915050565b600060208284031215610862576108616106b4565b5b600082013567ffffffffffffffff8111156108805761087f6106b9565b5b61088c8482850161081e565b91505092915050565b61089e81610676565b81146108a957600080fd5b50565b6000813590506108bb81610895565b92915050565b600080fd5b600080fd5b60008083601f8401126108e1576108e0610717565b5b8235905067ffffffffffffffff8111156108fe576108fd6108c1565b5b60208301915083600182028301111561091a576109196108c6565b5b9250929050565b6000806000806060858703121561093b5761093a6106b4565b5b6000610949878288016108ac565b945050602061095a878288016106d5565b935050604085013567ffffffffffffffff81111561097b5761097a6106b9565b5b610987878288016108cb565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109dc57607f821691505b6020821081036109ef576109ee610995565b5b50919050565b600082825260208201905092915050565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6000610a62602a836109f5565b9150610a6d82610a06565b604082019050919050565b60006020820190508181036000830152610a9181610a55565b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b6000610af46021836109f5565b9150610aff82610a98565b604082019050919050565b60006020820190508181036000830152610b2381610ae7565b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b6000610b86602b836109f5565b9150610b9182610b2a565b604082019050919050565b60006020820190508181036000830152610bb581610b79565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c1e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610be1565b610c288683610be1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610c65610c60610c5b84610676565b610c40565b610676565b9050919050565b6000819050919050565b610c7f83610c4a565b610c93610c8b82610c6c565b848454610bee565b825550505050565b600090565b610ca8610c9b565b610cb3818484610c76565b505050565b5b81811015610cd757610ccc600082610ca0565b600181019050610cb9565b5050565b601f821115610d1c57610ced81610bbc565b610cf684610bd1565b81016020851015610d05578190505b610d19610d1185610bd1565b830182610cb8565b50505b505050565b600082821c905092915050565b6000610d3f60001984600802610d21565b1980831691505092915050565b6000610d588383610d2e565b9150826002028217905092915050565b610d7182610568565b67ffffffffffffffff811115610d8a57610d89610721565b5b610d9482546109c4565b610d9f828285610cdb565b600060209050601f831160018114610dd25760008415610dc0578287015190505b610dca8582610d4c565b865550610e32565b601f198416610de086610bbc565b60005b82811015610e0857848901518255600182019150602085019450602081019050610de3565b86831015610e255784890151610e21601f891682610d2e565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220179b36c50ee849ecd4ad5592aca57d7b836513d8e40ebdc23ccd8bc18e08690664736f6c63430008110033";

type FxStateChildTunnelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FxStateChildTunnelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FxStateChildTunnel__factory extends ContractFactory {
  constructor(...args: FxStateChildTunnelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _fxChild: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FxStateChildTunnel> {
    return super.deploy(
      _fxChild,
      overrides || {}
    ) as Promise<FxStateChildTunnel>;
  }
  override getDeployTransaction(
    _fxChild: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_fxChild, overrides || {});
  }
  override attach(address: string): FxStateChildTunnel {
    return super.attach(address) as FxStateChildTunnel;
  }
  override connect(signer: Signer): FxStateChildTunnel__factory {
    return super.connect(signer) as FxStateChildTunnel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FxStateChildTunnelInterface {
    return new utils.Interface(_abi) as FxStateChildTunnelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FxStateChildTunnel {
    return new Contract(address, _abi, signerOrProvider) as FxStateChildTunnel;
  }
}
