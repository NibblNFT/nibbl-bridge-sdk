/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ERC20, ERC20Interface } from "../../../contracts/lib/ERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611246806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b23565b60405180910390f35b6100e660048036038101906100e19190610bde565b610308565b6040516100f39190610c39565b60405180910390f35b61010461032b565b6040516101119190610c63565b60405180910390f35b610134600480360381019061012f9190610c7e565b610335565b6040516101419190610c39565b60405180910390f35b610152610364565b60405161015f9190610ced565b60405180910390f35b610182600480360381019061017d9190610bde565b61037b565b60405161018f9190610c39565b60405180910390f35b6101b260048036038101906101ad9190610d08565b6103b2565b6040516101bf9190610c63565b60405180910390f35b6101d06103fa565b6040516101dd9190610b23565b60405180910390f35b61020060048036038101906101fb9190610bde565b61048c565b60405161020d9190610c39565b60405180910390f35b610230600480360381019061022b9190610bde565b610503565b60405161023d9190610c39565b60405180910390f35b610260600480360381019061025b9190610d35565b610526565b60405161026d9190610c63565b60405180910390f35b60606003805461028590610da4565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610da4565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6000806103136105ad565b90506103208185856105b5565b600191505092915050565b6000600254905090565b6000806103406105ad565b905061034d85828561077e565b61035885858561080a565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b6000806103866105ad565b90506103a78185856103988589610526565b6103a29190610e04565b6105b5565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461040990610da4565b80601f016020809104026020016040519081016040528092919081815260200182805461043590610da4565b80156104825780601f1061045757610100808354040283529160200191610482565b820191906000526020600020905b81548152906001019060200180831161046557829003601f168201915b5050505050905090565b6000806104976105ad565b905060006104a58286610526565b9050838110156104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e190610eaa565b60405180910390fd5b6104f782868684036105b5565b60019250505092915050565b60008061050e6105ad565b905061051b81858561080a565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b90610f3c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a90610fce565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107719190610c63565b60405180910390a3505050565b600061078a8484610526565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461080457818110156107f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ed9061103a565b60405180910390fd5b61080384848484036105b5565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610879576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610870906110cc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df9061115e565b60405180910390fd5b6108f3838383610a89565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610979576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610970906111f0565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a0c9190610e04565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a709190610c63565b60405180910390a3610a83848484610a8e565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610acd578082015181840152602081019050610ab2565b60008484015250505050565b6000601f19601f8301169050919050565b6000610af582610a93565b610aff8185610a9e565b9350610b0f818560208601610aaf565b610b1881610ad9565b840191505092915050565b60006020820190508181036000830152610b3d8184610aea565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7582610b4a565b9050919050565b610b8581610b6a565b8114610b9057600080fd5b50565b600081359050610ba281610b7c565b92915050565b6000819050919050565b610bbb81610ba8565b8114610bc657600080fd5b50565b600081359050610bd881610bb2565b92915050565b60008060408385031215610bf557610bf4610b45565b5b6000610c0385828601610b93565b9250506020610c1485828601610bc9565b9150509250929050565b60008115159050919050565b610c3381610c1e565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610ba8565b82525050565b6000602082019050610c786000830184610c54565b92915050565b600080600060608486031215610c9757610c96610b45565b5b6000610ca586828701610b93565b9350506020610cb686828701610b93565b9250506040610cc786828701610bc9565b9150509250925092565b600060ff82169050919050565b610ce781610cd1565b82525050565b6000602082019050610d026000830184610cde565b92915050565b600060208284031215610d1e57610d1d610b45565b5b6000610d2c84828501610b93565b91505092915050565b60008060408385031215610d4c57610d4b610b45565b5b6000610d5a85828601610b93565b9250506020610d6b85828601610b93565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610dbc57607f821691505b602082108103610dcf57610dce610d75565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0f82610ba8565b9150610e1a83610ba8565b9250828201905080821115610e3257610e31610dd5565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e94602583610a9e565b9150610e9f82610e38565b604082019050919050565b60006020820190508181036000830152610ec381610e87565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f26602483610a9e565b9150610f3182610eca565b604082019050919050565b60006020820190508181036000830152610f5581610f19565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fb8602283610a9e565b9150610fc382610f5c565b604082019050919050565b60006020820190508181036000830152610fe781610fab565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611024601d83610a9e565b915061102f82610fee565b602082019050919050565b6000602082019050818103600083015261105381611017565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110b6602583610a9e565b91506110c18261105a565b604082019050919050565b600060208201905081810360008301526110e5816110a9565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611148602383610a9e565b9150611153826110ec565b604082019050919050565b600060208201905081810360008301526111778161113b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111da602683610a9e565b91506111e58261117e565b604082019050919050565b60006020820190508181036000830152611209816111cd565b905091905056fea26469706673582212200e14b0d39fe2f715ad84cc457678dc8a6e2a9387551be5b912311a51c00c718364736f6c63430008110033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20> {
    return super.deploy(overrides || {}) as Promise<ERC20>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
